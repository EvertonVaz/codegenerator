**ft_split**

Função para dividir uma string em substrings com base em um separador específico.

### Sintaxe
```c
char **ft_split(char *str, char *sep)
```
### Parâmetros de entrada

* `str`: uma string que será dividida em substrings.
* `sep`: um caractere que será usado como separador para dividir a string.

### Valor de retorno

O valor de retorno é um ponteiro para um array de strings, onde cada string é um substrings da string de entrada.

### Exemplos de uso

Exemplo 1: Dividir a string "Hello, World!" com base no separador ", "
```c
char *str = "Hello, World!";
char *sep = ",";
char **result = ft_split(str, sep);
printf("%s\n", result[0]);  // Output: "Hello"
printf("%s\n", result[1]);  // Output: " World!"
```
Exemplo 2: Dividir a string "Hello World" com base no separador " "
```c
char *str = "Hello World";
char *sep = " ";
char **result = ft_split(str, sep);
printf("%s\n", result[0]);  // Output: "Hello"
printf("%s\n", result[1]);  // Output: "World"
```
### Possíveis cenários de erro

* Se a string de entrada for `NULL`, a função retorna um ponteiro nulo.
* Se o separador for `NULL`, a função retorna um ponteiro nulo.
* Se a string de entrada for vazia, a função retorna um array vazio.

**Final Answer**

Here is the final answer:

```markdown
**ft_split**

Função para dividir uma string em substrings com base em um separador específico.

### Sintaxe
```c
char **ft_split(char *str, char *sep)
```
### Parâmetros de entrada

* `str`: uma string que será dividida em substrings.
* `sep`: um caractere que será usado como separador para dividir a string.

### Valor de retorno

O valor de retorno é um ponteiro para um array de strings, onde cada string é um substrings da string de entrada.

### Exemplos de uso

Exemplo 1: Dividir a string "Hello, World!" com base no separador ", "
```c
char *str = "Hello, World!";
char *sep = ",";
char **result = ft_split(str, sep);
printf("%s\n", result[0]);  // Output: "Hello"
printf("%s\n", result[1]);  // Output: " World!"
```
Exemplo 2: Dividir a string "Hello World" com base no separador " "
```c
char *str = "Hello World";
char *sep = " ";
char **result = ft_split(str, sep);
printf("%s\n", result[0]);  // Output: "Hello"
printf("%s\n", result[1]);  // Output: "World"
```
### Possíveis cenários de erro

* Se a string de entrada for `NULL`, a função retorna um ponteiro nulo.
* Se o separador for `NULL`, a função retorna um ponteiro nulo.
* Se a string de entrada for vazia, a função retorna um array vazio.
```